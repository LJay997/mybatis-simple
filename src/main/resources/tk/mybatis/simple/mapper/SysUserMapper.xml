<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--org.apache.ibatis.builder.xml.XMLMapperBuilder 加载属性-->
<mapper namespace="tk.mybatis.simple.mapper.SysUserMapper">
    <cache type="org.mybatis.caches.redis.RedisCache" />
    <!--在保证 级缓存的全局配置开启的情况下， 级缓存只需要在Mapper中添加＜cache ／＞元素即可-->
    <!--
    LRU （最近最少使用的） 移除最长时间不被使用的对象，这是默认值
    FIFO （先进先出〉 按对象进入缓存的顺序来移除它们
    SOFT （软引用） 移除基于垃圾回收器状态和软引用规则的对象
    WEAK （弱引用） 更积极地移除基于垃圾收集器状态和弱引用规则的对象(更完整的信息请参考注解@CacheNamespace)
    -->
    <!--只读的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改-->
    <!--    <cache eviction="FIFO" readOnly="true" flushInterval="60000" size="512"/>-->
    <resultMap id="userRoleListMapSelect" type="SysUser" extends="BaseResultMap">
        <!-- column : java名字 = select列的名字 写select 就不用resultMap 了 -->
        <!-- column 配置为｛ userid=id ，将当前查询用户
        中的 id 赋值给 user Id ，使用 user Id 作为参数再进行 selectRoleByUserid 查询-->
        <collection property="sysRoleList" fetchType="lazy"
                    column="{userId=sys_user_id}" select="tk.mybatis.simple.mapper.SysRoleMapper.selectRoleByUserId"/>
    </resultMap>
    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
        select u.id            sys_user_id,
               u.user_name     sys_user_user_name,
               u.user_password sys_user_user_password,
               u.user_email    sys_user_user_email,
               u.user_info     sys_user_user_info,
               u.head_img      sys_user_head_img,
               u.create_time   sys_user_create_time
        from sys_user u
        where u.id = #{id}
    </select>
    <resultMap id="userRoleListMap" type="SysUser" extends="BaseResultMap">
        <collection property="sysRoleList" columnPrefix="role_"
                    resultMap="tk.mybatis.simple.mapper.SysRoleMapper.BaseResultMap"/>
    </resultMap>
    <resultMap id="userRoleListMap2" type="SysUser" extends="BaseResultMap">
        <collection property="sysRoleList" columnPrefix="role_"
                    resultMap="tk.mybatis.simple.mapper.SysRoleMapper.rolePrivilegeListMap"/>
    </resultMap>
    <resultMap id="userRoleMapSelect" extends="BaseResultMap" type="SysUser">
        <!--aggressiveLazyLoading fetchType加载机制默认是懒加载 就是一次加载完-->
        <association javaType="SysRole" property="sysRoleList" fetchType="eager"
                     select="tk.mybatis.simple.mapper.SysRoleMapper.selectByPrimaryKey" column="{id=role_id}"/>
        <!--fetchType 设置为 lazy ，这样设置后，只有当调用 getRole （）方法获取 role 的时候， MyBatis 会执行嵌套 查询去获取数据。-->
        <!-- 在嵌套的 SQL 中只能使用＃{id}参数，当需要多个参数时，可以配置多个，使用逗号隔开即可，例如: column="{id=role_id,name=role_name}" -->
    </resultMap>
    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        select
        u.id sys_user_id,
        u.user_name sys_user_user_name,
        u.user_password sys_user_user_password,
        u.user_email sys_user_user_email,
        u.user_info sys_user_user_info,
        u.head_img sys_user_head_img,
        u.create_time sys_user_create_time,
        ur.role_id
        <!--<include refid="Base_Column_List"/>
        <include refid="tk.mybatis.simple.mapper.SysRoleMapper.Base_Column_List"/>-->

        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id

        where u.id = #{id ,jdbcType=BIGINT}
    </select>
    <select id="selectUserAndRoleById" resultMap="BaseResultMap">
        select u.id            sys_user_id,
               u.user_name     sys_user_user_name,
               u.user_password sys_user_user_password,
               u.user_email    sys_user_user_email,
               u.user_info     sys_user_user_info,
               u.create_time   sys_user_create_time,
               r.id            r_id,
               r.role_name     r_role_name,
               r.enabled       r_enabled,
               r.create_by     r_create_by,
               r.create_time   r_create_time
        from sys_user u
                 inner join sys_user_role ur on u.id = ur.user_id
                 inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        select id,
               user_name     userName,
               user_password userPassword,
               user_email    userEmail,
               user_info     userinfo,
               head_img      headimg,
               create_time   createTime
        from sys_user
    </select>
    <resultMap id="BaseResultMap" type="sysUser">
        <id column="sys_user_id" jdbcType="BIGINT" property="id"/>
        <result column="sys_user_user_name" jdbcType="VARCHAR" property="userName"/>
        <!-- typeHandler="tk.mybatis.simple.type.EncryptStringTypeHandler"
        property="userPassword1" -->
        <result column="sys_user_user_password" jdbcType="VARCHAR" property="userPassword"/>
        <result column="sys_user_user_email" jdbcType="VARCHAR" property="userEmail"/>
        <result column="sys_user_user_info" jdbcType="VARCHAR" property="userInfo"/>
        <result column="sys_user_create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <collection property="sysRoleList" columnPrefix="r_"
                    resultMap="tk.mybatis.simple.mapper.SysRoleMapper.BaseResultMap"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="tk.mybatis.simple.model.SysUser">
        <result column="sys_user_head_img" jdbcType="BLOB" property="headImg"/>
    </resultMap>
    <sql id="Base_Column_List">
        sys_user.id as sys_user_id, sys_user.user_name as sys_user_user_name, sys_user.user_password as
        sys_user_user_password,
        sys_user.user_email as sys_user_user_email, sys_user.user_info as sys_user_user_info,
        sys_user.create_time as sys_user_create_time
    </sql>
    <sql id="Blob_Column_List">
        sys_user.head_img as sys_user_head_img
    </sql>
    <!--INSERT UPDATE DELETE 操作都会清空 级缓存 flushCache="true"-->
    <!--一级缓存是在默默地工作-->
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from sys_user sys_user
        where sys_user.id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
        select sr.id,
               sr.role_name    roleName,
               sr.enabled,
               sr.create_by    createBy,
               sr.create_time  createTime,
               u.user_name  as "user.userName",
               u.user_email as "user.userEmail"
        from sys_user u
                 inner join sys_user_role sur on u.id = sur.user_id
                 inner join sys_role sr on sur.role_id = sr.id
        where u.id = #{userId,jdbcType=BIGINT};
    </select>
    <select id="selectRolesByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole">
        select sr.id,
               sr.role_name,
               sr.create_time,
               sr.create_by
        from sys_user u
                 inner join sys_user_role sur on u.id = sur.user_id
                 inner join sys_role sr on sur.role_id = sr.id
        where u.id = #{userId}
          and sr.enabled = #{enabled}
    </select>
    <select id="selectRolesByUserIdAndRoleEnabled1" resultType="tk.mybatis.simple.model.SysRole">
        select sr.id,
               sr.role_name,
               sr.create_time,
               sr.create_by
        from sys_user u
                 inner join sys_user_role sur on u.id = sur.user_id
                 inner join sys_role sr on sur.role_id = sr.id
        where u.id = #{sysUser.id}
          and sr.enabled = #{sysRole.enabled}
    </select>
    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
        SELECT id, user_name, user_password, user_email, user_info, head_img, create_time
        from sys_user
        <where>
            <choose>
                <when test="id != null">
                    and id = #{id}
                </when>
                <when test="userName != null and userName != ''">
                    and user_name = #{userName}
                </when>
                <otherwise>
                    and 1 = 2
                </otherwise>
            </choose>
        </where>
    </select>
    <select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
        SELECT id, user_name, user_password, user_email, user_info, head_img, create_time
        from sys_user
        <where>
            id in
            <foreach collection="idList" open="(" close=")" item="id" separator="," index="i">
                #{id,jdbcType=BIGINT}
            </foreach>
        </where>
    </select>
    <resultMap id="userRoleMap" type="tk.mybatis.simple.model.SysUser" extends="ResultMapWithBLOBs">
        <association columnPrefix="role_" javaType="SysRole" property="sysRoleList"
                     resultMap="tk.mybatis.simple.mapper.SysRoleMapper.BaseResultMap">
            <!--resultMap属性和下面注释任意选一-->
            <!--<result property="id" column="id"/>
            <result property="roleName" column="role_name"/>
            <result column="enabled" property="enabled"/>
            <result column="create_by" property="createBy"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>-->
        </association>
    </resultMap>
    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        select
        u.id sys_user_id,
        u.user_name sys_user_user_name,
        u.user_password sys_user_user_password,
        u.user_email sys_user_user_email,
        u.user_info sys_user_user_info,
        u.head_img sys_user_head_img,
        u.create_time sys_user_create_time,
        r.id as role_id,
        r.role_name role_role_name,
        r.enabled role_enabled,
        r.create_by role_create_by,
        r.create_time role_create_time
        <!--<include refid="Base_Column_List"/>
        <include refid="tk.mybatis.simple.mapper.SysRoleMapper.Base_Column_List"/>-->

        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>
    <!-- <id>标签 的唯一作用就是在嵌套的映射配置时判断数据是否相同，当配置id标签
    时， Mybatis 只需要逐条比较所有数据中 id 标签配置的字段值是否相同既可。在配
    置嵌套结果 查询时，配置 id 标签可以提高处理效率 -->
    <select id="selectAllUserAndRoles" resultMap="userRoleListMap2">
        select u.id              sys_user_id,
               u.user_name       sys_user_user_name,
               u.user_password   sys_user_user_password,
               u.user_email      sys_user_user_email,
               u.user_info       sys_user_user_info,
               u.head_img        sys_user_head_img,
               u.create_time     sys_user_create_time,
               r.id as           role_id,
               r.role_name       role_role_name,
               r.enabled         role_enabled,
               r.create_by       role_create_by,
               r.create_time     role_create_time,
               sp.id             role_privilege_id,
               sp.privilege_name role_privilege_privilege_name,
               sp.privilege_url  role_privilege_privilege_url
        from sys_user u
                 inner join sys_user_role ur on u.id = ur.user_id
                 inner join sys_role r on ur.role_id = r.id
                 inner join sys_role_privilege srp on ur.role_id = srp.role_id
                 inner join sys_privilege sp on srp.privilege_id = sp.id
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from sys_user
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="sysUser" useGeneratedKeys="true">
        <!--<selectKey keyProperty="id" resultType="int" order="BEFORE">
            select CAST(RANDOM()*1000000 as INTEGER) a from `SYSIBM.SYSDUMMY1
        </selectKey>-->
        insert into sys_user (user_name, user_password, user_email,
        user_info, create_time, head_img)
        values (#{userName,jdbcType=VARCHAR}, #{userPassword1,jdbcType=VARCHAR}, #{userEmail,jdbcType=VARCHAR},
        #{userInfo,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{headImg,jdbcType=BLOB})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="sysUser" useGeneratedKeys="true">
        insert into sys_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userName != null">
                user_name,
            </if>
            <if test="userPassword != null">
                user_password,
            </if>
            <if test="userEmail != null">
                user_email,
            </if>
            <if test="userInfo != null">
                user_info,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="headImg != null">
                head_img,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="userPassword != null">
                #{userPassword,jdbcType=VARCHAR},
            </if>
            <if test="userEmail != null">
                #{userEmail,jdbcType=VARCHAR},
            </if>
            <if test="userInfo != null">
                #{userInfo,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="headImg != null">
                #{headImg,jdbcType=BLOB},
            </if>
        </trim>
    </insert>
    <insert id="insertList" useGeneratedKeys="true" keyProperty="id" keyColumn="id" parameterType="SysUser">
        insert into sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
        values
        <foreach collection="list" index="i" separator="," item="user">
            (#{user.userName}, #{user.userPassword}, #{user.userEmail},#{user.userInfo},#{user.headImg, jdbcType=BLOB},
            #{user.createTime,jdbcType=TIMESTAMP})
        </foreach>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="tk.mybatis.simple.model.SysUser">
        update sys_user
        <set>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="userPassword != null">
                user_password = #{userPassword,jdbcType=VARCHAR},
            </if>
            <if test="userEmail != null">
                user_email = #{userEmail,jdbcType=VARCHAR},
            </if>
            <if test="@org.apache.commons.lang.StringUtils@isNotBlank(userInfo)">
                user_info = #{userInfo,jdbcType=VARCHAR},
            </if>
            <if test="@org.apache.commons.lang.StringUtils@isNotBlank(createTime)">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <!--<if test="headImg != null">-->
            <if test="@org.apache.commons.lang.StringUtils@isNotBlank(headImg)">
                head_img = #{headImg,jdbcType=BLOB},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="sysUser">
        update sys_user
        set user_name     = #{userName,jdbcType=VARCHAR},
            user_password = #{userPassword,jdbcType=VARCHAR},
            user_email    = #{userEmail,jdbcType=VARCHAR},
            user_info     = #{userInfo,jdbcType=VARCHAR},
            create_time   = #{createTime,jdbcType=TIMESTAMP},
            head_img      = #{headImg,jdbcType=BLOB}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="sysUser">
        update sys_user
        set user_name     = #{userName,jdbcType=VARCHAR},
            user_password = #{userPassword,jdbcType=VARCHAR},
            user_email    = #{userEmail,jdbcType=VARCHAR},
            user_info     = #{userInfo,jdbcType=VARCHAR},
            create_time   = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateSysUserByMap">
        update sys_user set
        <foreach collection="_parameter" item="value" index="key" separator=",">
            ${key} = #{value}
        </foreach>
        where id = #{param.id, jdbcType=BIGINT}
        and user_password = #{ param.userPassword, jdbcType=VARCHAR}
    </update>
</mapper>